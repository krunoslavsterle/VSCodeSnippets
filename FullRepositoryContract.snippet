<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>Full Repository Contract</Title>
      <Author>Windows User</Author>
      <Description>
      </Description>
      <HelpUrl>
      </HelpUrl>
      <Shortcut>fullrepcontr</Shortcut>
    </Header>
    <Snippet>
      <Declarations>
        <Literal Editable="true">
          <ID>ProjectName</ID>
          <ToolTip>Name of the solution</ToolTip>
          <Default>ProjectName</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>RepositoryName</ID>
          <ToolTip>Name of the repository</ToolTip>
          <Default>User</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>IRepository</ID>
          <ToolTip>Name of the interface</ToolTip>
          <Default>IUserRepository</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>IPoco</ID>
          <ToolTip>Model interface name</ToolTip>
          <Default>IUserPoco</Default>
          <Function>
          </Function>
        </Literal>
      </Declarations>
      <Code Language="csharp" Delimiter="$"><![CDATA[using PagedList;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Threading.Tasks;

namespace $ProjectName$.Repository
{
    /// <summary>
    /// $RepositoryName$ repository contract.
    /// </summary>
    public interface $IRepository$
    {
        /// <summary>
        /// Gets a list of all <see cref="$IPoco$"/> models.
        /// </summary>
        /// <param name="orderBy">The order by.</param>
        /// <param name="includeProperties">The include properties.</param>
        /// <returns>List of <see cref="$IPoco$"/> models.</returns>
        IEnumerable<$IPoco$> GetAll(ISortingParameters orderBy = null, params string[] includeProperties);

        /// <summary>
        /// Gets a list of all <see cref="$IPoco$"/> models asynchronously.
        /// </summary>
        /// <param name="orderBy">The order by.</param>
        /// <param name="includeProperties">The include properties.</param>
        /// <returns>List of <see cref="$IPoco$"/> models asynchronously.</returns>
        Task<IEnumerable<$IPoco$>> GetAllAsync(ISortingParameters orderBy = null, params string[] includeProperties);

        /// <summary>
        /// Gets a paged list of all <see cref="$IPoco$"/> models.
        /// </summary>
        /// <param name="pagingParameters">The paging parameters.</param>
        /// <param name="orderBy">The order by.</param>
        /// <param name="includeProperties">The include properties.</param>
        /// <returns>Paged list of all <see cref="$IPoco$"/> models.</returns>
        IPagedList<$IPoco$> GetAllPaged(IPagingParameters pagingParameters, ISortingParameters orderBy = null, params string[] includeProperties);

        /// <summary>
        /// Gets a paged list of all <see cref="$IPoco$"/> models asynchronously.
        /// </summary>
        /// <param name="pagingParameters">The paging parameters.</param>
        /// <param name="orderBy">The order by.</param>
        /// <param name="includeProperties">The include properties.</param>
        /// <returns>Paged list of all <see cref="$IPoco$"/> models asynchronously.</returns>
        Task<IPagedList<$IPoco$>> GetAllPagedAsync(IPagingParameters pagingParameters, ISortingParameters orderBy = null, params string[] includeProperties);

        /// <summary>
        /// Gets the one <see cref="$IPoco$"/> model asynchronously.
        /// </summary>
        /// <param name="filter">The filter expression.</param>
        /// <param name="includeProperties">The include properties.</param>
        /// <returns>One <see cref="$IPoco$"/> asynchronously.</returns>
        Task<$IPoco$> GetOneAsync(Expression<Func<$IPoco$, bool>> filter = null, params string[] includeProperties);

        /// <summary>
        /// Gets the one <see cref="$IPoco$"/> model.
        /// </summary>
        /// <param name="filter">The filter expression.</param>
        /// <param name="includeProperties">The include properties.</param>
        /// <returns></returns>
        $IPoco$ GetOne(Expression<Func<$IPoco$, bool>> filter = null, params string[] includeProperties);

        /// <summary>
        /// Gets the list of <see cref="$IPoco$"/> models.
        /// </summary>
        /// <param name="filter">The filter expression.</param>
        /// <param name="orderBy">The order by.</param>
        /// <param name="includeProperties">The include properties.</param>
        /// <returns>List of <see cref="$IPoco$"/> models.</returns>
        IEnumerable<$IPoco$> Get(Expression<Func<$IPoco$, bool>> filter = null, ISortingParameters orderBy = null, params string[] includeProperties);

        /// <summary>
        /// Gets the list of <see cref="$IPoco$"/> models asynchronous.
        /// </summary>
        /// <param name="filter">The filter expression.</param>
        /// <param name="orderBy">The order by.</param>
        /// <param name="includeProperties">The include properties.</param>
        /// <returns>List of <see cref="$IPoco$"/> models asynchronous.</returns>
        Task<IEnumerable<$IPoco$>> GetAsync(Expression<Func<$IPoco$, bool>> filter = null, ISortingParameters orderBy = null, params string[] includeProperties);

        /// <summary>
        /// Gets the paged list of <see cref="$IPoco$"/> models.
        /// </summary>
        /// <param name="pagingParameters">The paging parameters.</param>
        /// <param name="filter">The filter expression.</param>
        /// <param name="orderBy">The order by.</param>
        /// <param name="includeProperties">The include properties.</param>
        /// <returns>Paged list of <see cref="$IPoco$"/> models.</returns>
        IPagedList<$IPoco$> GetPaged(IPagingParameters pagingParameters, Expression<Func<$IPoco$, bool>> filter = null, ISortingParameters orderBy = null, 
            params string[] includeProperties);

        /// <summary>
        /// Gets the paged list of <see cref="$IPoco$"/> models asynchronous.
        /// </summary>
        /// <param name="pagingParameters">The paging parameters.</param>
        /// <param name="filter">The filter expression.</param>
        /// <param name="orderBy">The order by.</param>
        /// <param name="includeProperties">The include properties.</param>
        /// <returns>Paged list of <see cref="$IPoco$"/> models asynchronous.</returns>
        Task<IPagedList<$IPoco$>> GetPagedAsync(IPagingParameters pagingParameters, Expression<Func<$IPoco$, bool>> filter = null,
            ISortingParameters orderBy = null, params string[] includeProperties);

        /// <summary>
        /// Gets the <see cref="$IPoco$"/> model by identifier.
        /// </summary>
        /// <param name="id">The identifier.</param>
        /// <returns><see cref="$IPoco$"/>.</returns>
        $IPoco$ GetById(Guid id);

        /// <summary>
        /// Gets the <see cref="$IPoco$"/> model by identifier asynchronous.
        /// </summary>
        /// <param name="id">The identifier.</param>
        /// <returns><see cref="$IPoco$"/>.</returns>
        Task<$IPoco$> GetByIdAsync(Guid id);

        /// <summary>
        /// Gets the <see cref="$IPoco$"/> count.
        /// </summary>
        /// <param name="filter">The filter expression.</param>
        /// <returns><see cref="$IPoco$"/> count.</returns>
        int GetCount(Expression<Func<$IPoco$, bool>> filter = null);

        /// <summary>
        /// Gets the <see cref="$IPoco$"/> count asynchronous.
        /// </summary>
        /// <param name="filter">The filter expression.</param>
        /// <returns><see cref="$IPoco$"/> count asynchronous.</returns>
        Task<int> GetCountAsync(Expression<Func<$IPoco$, bool>> filter = null);

        /// <summary>
        /// Checks if sequence in filter contains entities.
        /// </summary>
        /// <param name="filter">The filter expression.</param>
        /// <returns>True if sequence contains at least one entity.</returns>
        bool GetIsExists(Expression<Func<$IPoco$, bool>> filter = null);

        /// <summary>
        /// Checks if sequence in filter contains entities asynchronous.
        /// </summary>
        /// <param name="filter">The filter expression.</param>
        /// <returns>True if sequence contains at least one entity.</returns>
        Task<bool> GetIsExistsAsync(Expression<Func<$IPoco$, bool>> filter = null);

        /// <summary>
        /// Inserts the specified <see cref="$IPoco$"/> model into the database.
        /// </summary>
        /// <param name="model">The model.</param>
        void Insert($IPoco$ model);

        /// <summary>
        /// Inserts the list of <see cref="$IPoco$"/> models into the database.
        /// </summary>
        /// <param name="models">The list of models.</param>
        void Insert(IList<$IPoco$> models);

        /// <summary>
        /// Inserts the specified <see cref="$IPoco$"/> model into the database asynchronous.
        /// </summary>
        /// <param name="model">The model.</param>
        System.Threading.Tasks.Task InsertAsync($IPoco$ model);

        /// <summary>
        /// Inserts the list of <see cref="$IPoco$"/> models into the database asynchronous.
        /// </summary>
        /// <param name="models">The list of models.</param>
        System.Threading.Tasks.Task InsertAsync(IList<$IPoco$> models);

        /// <summary>
        /// Updates the specified <see cref="$IPoco$"/> model.
        /// </summary>
        /// <param name="model">The model.</param>
        void Update($IPoco$ model);

        /// <summary>
        /// Updates the list of <see cref="$IPoco$"/> models.
        /// </summary>
        /// <param name="model">The list of models.</param>
        void Update(IList<$IPoco$> models);

        /// <summary>
        /// Updates the specified <see cref="$IPoco$"/> model asynchronous.
        /// </summary>
        /// <param name="model">The model.</param>
        System.Threading.Tasks.Task UpdateAsync($IPoco$ model);

        /// <summary>
        /// Updates the list of <see cref="$IPoco$"/> models asynchronous.
        /// </summary>
        /// <param name="model">The list of models.</param>
        System.Threading.Tasks.Task UpdateAsync(IList<$IPoco$> models);

        /// <summary>
        /// Deletes model by id.
        /// </summary>
        /// <param name="id">The identifier.</param>
        void Delete(Guid id);

        /// <summary>
        /// Deletes models by the list of ids.
        /// </summary>
        /// <param name="ids">The list of identifiers.</param>
        void Delete(IList<Guid> ids);

        /// <summary>
        /// Deletes model by id asynchronous.
        /// </summary>
        /// <param name="id">The identifier.</param>
        System.Threading.Tasks.Task DeleteAsync(Guid id);

        /// <summary>
        /// Deletes models by the list of ids asynchronous.
        /// </summary>
        /// <param name="ids">The list of identifiers.</param>
        System.Threading.Tasks.Task DeleteAsync(IList<Guid> ids);

        /// <summary>
        /// Deletes the specified <see cref="$IPoco$"/> model.
        /// </summary>
        /// <param name="model">The model.</param>
        void Delete($IPoco$ model);

        /// <summary>
        /// Deletes the list of models.
        /// </summary>
        /// <param name="models">The list of models.</param>
        void Delete(IList<$IPoco$> models);

        /// <summary>
        /// Deletes the specified <see cref="$IPoco$"/> model asynchronous.
        /// </summary>
        /// <param name="model">The model.</param>
        System.Threading.Tasks.Task DeleteAsync($IPoco$ model);

        /// <summary>
        /// Deletes the list of models.
        /// </summary>
        /// <param name="models">The list of models.</param>
        System.Threading.Tasks.Task DeleteAsync(IList<$IPoco$> models);

        /// <summary>
        /// Adds <see cref="$IPoco$"/> model for insert. This will not call Save() method.
        /// </summary>
        /// <param name="model">The model.</param>
        void AddForInset($IPoco$ model);

        /// <summary>
        /// Adds <see cref="$IPoco$"/> model for update. This will not call Save() method.
        /// </summary>
        /// <param name="model">The model.</param>
        void AddForUpdate($IPoco$ model);

        /// <summary>
        /// Adds <see cref="$IPoco$"/> model for delete. This will not call Save() method.
        /// </summary>
        /// <param name="model">The model.</param>
        void AddForDelete($IPoco$ model);

        /// <summary>
        /// Saves the context changes.
        /// </summary>
        void Save();

        /// <summary>
        /// Saves the context changes asynchronous.
        /// </summary>
        System.Threading.Tasks.Task SaveAsync();
    }
}]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>